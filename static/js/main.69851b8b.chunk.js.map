{"version":3,"sources":["apiKeys.js","components/title/Title.jsx","components/form/Form.jsx","components/weather/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","Form","onSubmit","this","props","getWeather","type","name","placeholder","autoComplete","autoFocus","style","textTransform","maxLength","Component","Weather","error","temperature","city","country","humidity","description","icon","displayIcon","API_KEY","apiConfig","weatherApiKey","App","state","e","a","preventDefault","target","elements","value","fetch","response","json","data","setState","main","temp","weather","sys","console","log","message","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.69851b8b.chunk.js","sourcesContent":["module.exports = {\r\n    \"weatherApiKey\": \"e74b300e08977126910f21534135bd18\"\r\n}","import React from 'react';\r\n\r\nimport './title.styles.scss';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1>Weather Finder</h1>\r\n            <h2>Find out weather conditions</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React, {Component} from 'react'\r\n\r\nimport './form.styles.scss';\r\n\r\nclass Form extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <div className=\"search\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            placeholder=\"City...\"\r\n                            className=\"search-bar\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus\r\n                            style={{\r\n                            textTransform: 'capitalize'\r\n                        }}/>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            placeholder=\"Country...\"\r\n                            maxLength=\"2\"\r\n                            className=\"search-bar\"\r\n                            autoComplete=\"off\"\r\n                            style={{\r\n                            textTransform: 'uppercase'\r\n                        }}/>\r\n                    </div>\r\n                    <div className=\"button-style\">\r\n\r\n                        <button>Get Weather</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react'\r\n\r\nimport './weather.styles.scss';\r\n\r\nclass Weather extends Component {\r\n\r\n    \r\n\r\n    render() {\r\n        const {error, temperature, city, country, humidity, description, icon } = this.props;\r\n        let displayIcon = '11';\r\n        switch (icon) {\r\n            case \"Clouds\":\r\n                displayIcon = 'fa-cloud'\r\n                break;\r\n            case \"Rain\":\r\n                displayIcon = 'fa-cloud-showers-heavy'\r\n                break;\r\n            case \"Clear\":\r\n                displayIcon = 'fa-sun'\r\n                break;\r\n            case \"Thunderstorm\":\r\n                displayIcon = 'fa-bolt'\r\n                break;\r\n            case \"Drizzle\":\r\n                displayIcon = 'fa-cloud-rain'\r\n                break;\r\n            case \"Snow\":\r\n                displayIcon = 'fa-snowflake'\r\n                break;\r\n            default:\r\n                displayIcon = icon\r\n                break;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {\r\n                !error && city && country && description ? \r\n                (\r\n                <div className=\"weather-container\">\r\n                <i className = {`fas ${displayIcon} fa-8x`} />\r\n                <p>Temperature: {temperature}&#8457;</p>\r\n                <p>City: {city}</p>\r\n                <p>Humidity: {humidity}</p>\r\n                <p>Description: {description}</p>\r\n                 </div>   ) :\r\n                null\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Title from './components/title/Title';\nimport Form from './components/form/Form';\nimport Weather from './components/weather/Weather';\n\nimport apiConfig from './apiKeys';\n\nimport './App.scss';\n\nconst API_KEY = apiConfig.weatherApiKey;\n\nclass App extends Component {\n\n  state = {\n    temperature: '',\n    humidity: '',\n    description: '',\n    city:'',\n    country:'',\n    icon: '',\n    error: null\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n      const data = await response.json();\n\n    this.setState({\n      temperature: data.main.temp,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      city: data.name,\n      country: data.sys.country,\n      icon: data.weather[0].main,\n      error: ''\n    });\n\n    } catch (err) {\n      console.log(err.message);\n      alert('Please fill in all fields');\n      this.setState({\n        error: err.message\n      }, () => console.log(this.state))\n    }\n    \n  }\n\n\n\n  render() {\n\n    const { temperature, humidity, description, city, country, icon, error } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Title />\n        <Form getWeather={this.getWeather} \n        />\n        <Weather \n        temperature={temperature}\n        humidity={humidity}\n        description={description}\n        city={city}\n        country={country}\n        icon={icon}\n        error={error}\n        />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}